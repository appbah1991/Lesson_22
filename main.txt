Как я сделал полноценное приложение, не прикасаясь к JavaScript
https://habr.com/ru/post/670202/?utm_campaign=670202&utm_source=habrahabr&utm_medium=rss
Я всегда скептически относился к чат-ботам. Когда-то они были на хайпе. Говорили, что это новый UI – он же No UI. Но я всегда утверждал, что пользователю проще и быстрее все действия сделать через сайт, а не играть с ботом в вопрос-ответ. Каково же было моё удивление, когда через несколько лет я сам буду пропагандировать чат-ботов всем моим друзьям - backend-разработчикам? В данной статье расскажу, как я до этого дошел.

Как тестировать сайт на Django. Часть 2. JavaScript и русский текст на английских страницах
https://habr.com/ru/post/652951/?utm_campaign=652951&utm_source=habrahabr&utm_medium=rss
В прошлой статье мы познакомились с тестами для Django и создали личного пользователя-тестировщика. Самое время продолжить изучать тестирование сайта, написав проверку русских символов на английских страницах и разобрав тесты для JavaScript.

Как мы собрали проект на Django и React и уважили загрузчик Webpack
https://habr.com/ru/post/651465/?utm_campaign=651465&utm_source=habrahabr&utm_medium=rss
Когда мы взялись за гибридный проект, в котором одновременно использовались Django и React, мы столкнулись с дилеммой: как интегрировать две эти части, в особенности, как разрешить шаблонам Django отображать ресурсы JavaScript, сгенерированные при клиентской сборке. Мы нашли изящный способ, позволяющий с этим справиться: использовать Webpack-загрузчик для Django с трекером бандлов Webpack, при помощи которых нам поддался этот этап работы сборочного конвейера. А в этой статье мы научим вас, как это делается.

Ультимативная шпаргалка по Selenium с Python для автоматизации тестирования
https://habr.com/ru/post/596071/?utm_campaign=596071&utm_source=habrahabr&utm_medium=rss
Начнем с того, что Selenium – это открытый фреймворк, который в основном используется для автоматизации взаимодействия с веб-элементами в AUT (Application Under Test). Наряду с Python, Selenium также поддерживает Java, C#, JavaScript, Ruby и PHP. Однако, по своему опыту скажу, что Python – лучший вариант для веб-автоматизации в комбинации с Selenium.

Блокчейн на Python
https://habr.com/ru/post/589371/?utm_campaign=589371&utm_source=habrahabr&utm_medium=rss
Когда я читал статью про блокчейн на JavaScript, мне было интересно познакомиться с идеями о блокчейн-разработке, которые отличаются от тех, что мне уже известны. А как только я начал читать код, мне захотелось сопоставить его с аналогичным Python-кодом, чтобы ещё и разобраться с его отличиями от кода, написанного на JavaScript.  Цель этого материала заключается в том, чтобы выявить отличия языков. Его можно считать Python-дополнением к исходной статье.

Решил 50 задач и ответил на вопрос — Python или JavaScript?
https://habr.com/ru/post/579080/?utm_campaign=579080&utm_source=habrahabr&utm_medium=rss


Python Bytes: #219 HTMX: Dynamic and live HTML without JavaScript
https://pythonbytes.fm/episodes/show/219/htmx-dynamic-and-live-html-without-javascript


Опыт сопряжения Java, JavaScript, Ruby и Python в одном проекте посредством GraalVM
https://habr.com/ru/post/534044/?utm_campaign=534044&utm_source=habrahabr&utm_medium=rss
В прошлом месяце вышла стабильная LTS-версия многоязычной среды выполнения GraalVM 20.3.0 от корпорации Oracle и мне захотелось испробовать её для решения какой-нибудь интересной практической задачи. Для тех кто не в курсе, приведу краткое описание этой новой платформы. GraalVM позволяет использовать в едином окружении различные популярные языки программирования и обеспечивает их разностороннее взаимодействие в рамках некоторой общей среды выполнения.

Brython: заменяем JavaScript на Python на фронтенде
https://habr.com/ru/post/532454/?utm_campaign=532454&utm_source=habrahabr&utm_medium=rss
К огромному удовлетворению нашей читательской аудитории, наша работа над обновлением книг по Python не прекращается. Но не прекращается и поиск в этом направлении — и сегодня мы хотели бы упомянуть Brython — Python для браузеров. Статья короткая, немного игривая и детективная, мы постарались сохранить авторский стиль.

Вышел новый релиз «Python для браузеров», встречаем Brython 3.9
https://habr.com/ru/post/522968/?utm_campaign=522968&utm_source=habrahabr&utm_medium=rss
Разработчики проекта Brython Python выпустили новый релиз, Brython 3.9. Сам проект позиционируется, как «Python для браузера». Он основан на Python 3 и выполняется на стороне браузера, причем для разработки веб-скриптов вместо JavaScript используется Python.  Код проекта написан на Python и распространяется под лицензией BSD. Новый релиз совместим с Python 3.9, плюс обновлена стандартная библиотека.

Какая асинхронность должна была бы быть в Python
https://habr.com/ru/post/512650/?utm_campaign=512650&utm_source=habrahabr&utm_medium=rss
В последние несколько лет ключевое слово async и семантика асинхронного программирования проникла во многие популярные языки программирования: JavaScript, Rust, C#, и многие другие. Конечно, в Python тоже есть async/await, они появились в Python 3.5. В этой статье хочу обсудить проблемы асинхронного кода, порассуждать об альтернативах и предложить новый подход поддерживать и синхронные, и асинхронные приложения одновременно.

9 лучших опенсорс находок за сентябрь 2019
https://habr.com/ru/post/469753/?utm_campaign=469753&utm_source=habrahabr&utm_medium=rss
Технологии внутри: Python, C, Rust, Ruby, JavaScript, Go. Тематика: веб разработка, администрирование, инструменты разработчика.

9 лучших опенсорс находок за август 2019
https://habr.com/ru/post/465855/?utm_campaign=465855&utm_source=habrahabr&utm_medium=rss
За полным списком новых полезных инструментов, статей и докладов можно обратиться в мой телеграм канал @OpensourceFindings (по ссылке зеркало, если не открывается оригинал). В сегодняшнем выпуске. Технологии внутри: Python, Rust, JavaScript, Go. Тематика: веб разработка, администрирование, инструменты разработчика.

Глубокое обучение с подкреплением: пинг-понг по сырым пикселям
https://habr.com/ru/post/439674/?utm_campaign=439674
Вы, возможно, знаете, что компьютеры теперь могут автоматически учиться играть в игры ATARI(получая на вход сырые игровые пиксели!). Они бьют чемпионов мира в игру Го, виртуальные четвероногие учатся бегать и прыгать, а роботы учатся выполнять сложные задачи манипуляции, которые бросают вызов явному программированию. Оказывается, что все эти достижения не обходятся без RL. Я также заинтересовался RL в течение прошлого года: я работал с книгой Ричарда Саттона (прим.пер.: ссылка заменена), читал курс Дэвида Сильвера, смотрел лекции Джона Шульмана, написал библиотеку RL на Javascript, летом проходил практику в DeepMind, работая в группе DeepRL, и совсем недавно — в разработке OpenAI Gym, – нового инструментария RL. Так что я, конечно, был на этой волне, по крайней мере, год, но до сих пор не удосужился написать заметку о том, почему RL имеет большое значение, о чем он, как все это развивается.

Владимир Деев - Как создать MVP онлайн сервиса на Flask Admin за 60 минут
https://www.youtube.com/watch?v=BLf5C7Sz9Oc
Слайды: https://docs.google.com/presentation/d/1bpUc8xxvdJZ95mfvhHSfMUaQTZjP4l8YijkIBuqFD0Y/edit?usp=sharingМногие пытаются сделать стартап сразу красивым и привлекательным, используя очередной новомодный JS-фреймворк. Я же убежден, что в ряде случаях гипотезу можно проверить создав веб на базе админки. Расскажу об одном стартапе, которые был создан (и просуществовал в течение 1.5 лет) на Flask-Admin - админке, работающей поверх Flask, WTForms и SQLALchemy, при этом в проекте было написано минимум Javascript-кода. В докладе расскажу о граблях, на которые мы наступили и различных трюках кастомизации данной админки. 

Создание универсального приложения с Nuxt.js и Django
https://webdevblog.ru/sozdanie-universalnogo-prilozheniya-s-nuxt-js-i-django/
Появление современных библиотек JavaScript, таких как React.js и Vue.js, трансформировало front-end веб-разработку в лучшую сторону. Эти библиотеки поставляются с богатым набором функциональности, позволяя быстро создавать одностраничные приложения SPA, которые в основном представляют собой динамическую загрузку и отображение содержимого веб-страниц без полной перезагрузки браузера.

Как писать X элемент на Python 3 и JavaScript (ES2015)
https://sayazamurai.github.io/python-vs-javascript/


[Перевод] Аналоги в Python и JavaScript. Часть четвертая
https://habr.com/post/419271/?utm_campaign=419271
Четвертая часть серии статей про аналогии в Python и JavaScript. В этой части: аргументы функций, создание и работа с классами, наследование, геттеры-сеттеры и свойства класса. Краткое содержание предыдущих частей: Часть первая: приведение к типу, тернарный оператор, доступ к свойству по имени свойства, словари, списки, строки, конкатенация строк. Часть вторая: JSON, регулярки, ошибки-исключения Часть третья: современные Python и JS: строковые шаблоны (f-строки), распаковка списков, лямбда-функции, итерации по спискам, генераторы, множества.

[Перевод] Аналоги в Python и JavaScript. Часть третья
https://habr.com/post/418191/?utm_campaign=418191
В прошлых выпусках мы опирались на синтаксис классических версий Питона (2.7) и JS на основе ECMAScript 5. В этот раз мы будем использовать новые функции которые появились в Питоне 3.6 и JS стандарта ECMAScript 6. ECMAScript 6 — относительно новый стандарт поддерживаемый большинством современных браузеров. Для использования стандарта 6 в старых браузерах вам понадобиться Babel для перевода современных конструкций JS6 на кросс-браузерную поддержку.В сегодняшней статье: переменные в строках, распаковка списков, лямбда-функции, итерирование без индексов, генераторы и множества (sets).

Аналоги в Python и JavaScript. Часть вторая
https://habr.com/post/417513/?utm_campaign=417513
Продолжаем публикацию перевода серии статей о схожести и различии двух языков. Сегодня поговорим о сериализации словарей, JSON, регулярках, об ошибках и исключениях.

Аналоги в Python и JavaScript. Часть первая
https://habr.com/post/416617/?utm_campaign=416617
Несмотря на то что Python и Javascript довольно сильно отличаются, существует много схожего, о чем должен знать любой фулстек разработчик. В этой серии из 4-х статей мы увидим что есть общего в обоих языках, и рассмотрим ряд известных проблем а также способы их решения.

ChromeREPL - Sublime Text плагин для исполнения JavaScript в Google Chrome
http://github.com/acarabott/ChromeREPL


Как я писал логин по протоколу SRP6a на Python, а получил… JavaScript и Python в одной коробке
https://habr.com/post/413131/?utm_campaign=413131
Большое и увлекательное путешествие начинается с простого и банального шага. Когда мне на работе понадобилось реализовывать процесс логина для набора автоматизированных тестов, я даже не представлял, куда это приведет.  Дальше в статье вы узнаете, как доказать, что вы знаете пароль, ни разу не передав его в каком бы то ни было виде (доказательство с нулевым разглашением), и как я спотыкался на готовых примерах, чтобы получить работающий код на Python в конце пути.

Мега-Учебник Flask, Часть XX: Магия JavaScript
https://habrahabr.ru/post/353804/?utm_campaign=353804
Это двадцатый выпуск серии Мега-учебника Flask, в котором я собираюсь добавить всплывающее окно, появляющееся при наведении указателя мыши на имя пользователя.

Never Fail Twice, или как построить мониторинговую систему с нуля
https://habrahabr.ru/post/352980/?utm_campaign=352980
У нас было 2 виртуальные машины, 75 сайтов, десятки тысяч машин для мониторинга, тысячи метрик, две базы данных и одна очередь ActiveMQ, Python и целое множество библиотек всех сортов и расцветок, pandas, а также numpy, dash, flask, SQL Alchemy. Не то чтобы это был необходимый запас для системы, но если начал собирать компоненты, становится трудно остановиться. Единственное, что вызывало у меня опасение — это JavaScript. Ничто в мире не бывает более беспомощным, безответственным и порочным, чем JS зомби. Я знал, что рано или поздно мы перейдем и на эту дрянь.

Мега-Учебник Flask, Часть XIV: Ajax
https://habrahabr.ru/post/350626/?utm_campaign=350626
Это четырнадцатая часть Мега-Учебника Flask,k, в которой я собираюсь добавить функцию перевода текста в реальном времени, используя службу перевода Microsoft и немного JavaScript.

django-telegram-login - Авторизация пользователя на вашем сайте через Telegram для Django
https://github.com/dmytrostriletskyi/django-telegram-login
6 февраля Telegram ввел возможность добавлять на свой сайт виджет для авторизации пользователя через его аккаунт в Telegram. Виджеты по виду реализации на сервере делятся на два вида — обработать данные пользователя «здесь и сейчас» в JavaScript или же перенаправить данные в параметрах URL на указанный адрес. Также саму кнопку можно настроить внешне: изменять размер, отключать и включать фотографию.django-telegram-login — настройка авторизации пользователя через Telegram-аккаунт на вашем сайте на Django.

json — JavaScript Object Notation — PyMOTW 3
https://doughellmann.com/blog/2018/01/29/json-javascript-object-notation-pymotw-3/


CoffeeMiner: взлом WiFi для внедрения криптомайнера в HTML-страницы
https://habrahabr.ru/post/347144/?utm_campaign=347144
Несколько недель назад я прочитал этом случае Starbucks, где хакеры взламывали ноутбуки в сети WiFi, чтобы майнить на них криптовалюту. И я подумал, что может быть интересно провести атаку иным способом.  Цель этой статьи — объяснить, как провести атаку MITM (человек посередине) для внедрения определённого JavaScript-кода в страницы HTML, чтобы заставить все устройства, подключённые к WiFi, майнить криптовалюту для злоумышленника.  Задача состоит в создании скрипта, который проводит автономную атаку в сети WiFi. Это то, что мы назвали CoffeeMiner, поскольку атаки такого типа можно проводить в кафе.

Генетический алгоритм построения алгоритмов
https://habrahabr.ru/post/346134/?utm_campaign=346134
В типичной реализации генетический алгоритм оперирует параметрами какой-то сложной функции (диофантовые уравнения в статье "Генетический алгоритм. Просто о сложном" mrk-andreev) или алгоритма ("Эволюция гоночных автомобилей на JavaScript" ilya42). Количество параметров неизменно, операции над ними тоже изменить невозможно, как генетика не старается, потому что они заданы нами.

Что за чёрт, Python
https://habrahabr.ru/post/337364/
Недавно мы писали о забавных, хитрых и странных примерах на JavaScript. Теперь пришла очередь Python. У Python, высокоуровневого и интерпретируемого языка, много удобных свойств. Но иногда результат работы некоторых кусков кода на первый взгляд выглядит неочевидным.Ниже — забавный проект, в котором собраны примеры неожиданного поведения в Python с обсуждением того, что происходит под капотом. Часть примеров не относятся к категории настоящих WTF?!, но зато они демонстрируют интересные особенности языка, которых вы можете захотеть избегать. Я думаю, это хороший способ изучить внутреннюю работу Python, и надеюсь, вам будет интересно.

v8py - binding для V8
https://github.com/tbodt/v8py
Соединяемся с JavaScript

Отзывчивые столбчатые диаграммы с Bokeh, Flask и Python 3
https://habrahabr.ru/post/330706/?utm_source=habrahabr&utm_medium=rss&utm_campaign=hub
 Bokeh — это мощная библиотека с открытым исходным кодом, которая позволяет визуализировать данные для веб-приложений, не написав ни строчки на javascript. Изучение библиотек для визуализации вроде d3.js может оказаться полезным, но гораздо легче написать несколько строк кода на Python, чтобы решить задачу. С Bokeh мы можем создавать поразительно детальные интерактивные визуализации или же более простые вещи, вроде столбчатых диаграмм. Давайте разберёмся, как можно использовать Flask и Bokeh для визуализации данных в веб-приложении.

Web crawler с использованием Python и Chrome
https://habrahabr.ru/post/328800/?utm_source=habrahabr&utm_medium=rss&utm_campaign=hub
Недавно, сидя на диване, я задумался о том, что хочется мне сделать своего паука, который что-то бы смог качать с веб сайтов. Но качать он должен был бы не простой загрузкой, а как настоящий милый добрый браузер (т.е. JavaScript чтобы исполнялся).В моей голове всплыли такие интересные штуки, как Selenium, PhantomJS, Splash и всякое подобное. Все эти штуки были мне немного втягость. Вот какие причины я выявил:

JavaScript vs. Python в 2017
https://hackernoon.com/javascript-vs-python-in-2017-d31efbb641b4#.e6fhkgl4i


Transcrypt - Python 3.5 в JavaScript компилятор
http://github.com/QQuick/Transcrypt


sklearn-porter - обучаем scikit-learn модели используя C, Java, JavaScript
http://github.com/nok/sklearn-porter
Применяется Transpile подход

Интервью с Ильёй, который выступит на Moscow Python уже послезавтра
https://habrahabr.ru/post/311538/?utm_source=habrahabr&utm_medium=rss&utm_campaign=hub
И уже послезавтра я с коллегами из Moscow Pythonсоберу разработчиков на одноименной конференции: чтобы пить кофе, общаться, общаться и еще раз общаться! А чтобы было о чем общаться, мы распределили по двум потокам 14 спикеров, которые расскажут самое любопытное из мира Python разработки и зададут темы для обсуждения. Илья Беда, техлид Bro.Engineering – тот самый «full stack developer», который и на Python backend, и на JavaScript фронтенд и на Qt десктоп. На конференции Илья расскажет про конструирование собственных DSL, используя структуры данных Python. А на Хабре – уже ответил на множество каверзных вопросов и рассказал, как смотрит на разработку. Кстати, с предыдущими тремя интервью вы можете ознакомиться здесь, здесьи здесь.

Немного про кино или как делать интерактивные визуализации в python
https://habrahabr.ru/post/308162/?utm_source=habrahabr&utm_medium=rss&utm_campaign=hub
 В этой заметке я хочу рассказать о том, как можно достаточно легко строить интерактивные графики в Jupyter Notebook'e с помощью библиотеки plotly. Более того, для их построения не нужно поднимать свой сервер и писать код на javascript. Еще один большой плюс предлагаемого подхода — визуализации будут работать и в NBViewer'e, т.е. можно будет легко поделиться своими результатами с коллегами. Вот, например, мой код для этой заметки.

Решаем Hola Javascript Challenge с помщью LSTM
https://habrahabr.ru/post/303914/?utm_source=habrahabr&utm_medium=rss&utm_campaign=hub
Вдохновлено недавним Hola Javascript Challenge. Упаковывать алгоритм в 64кб не будем, но зато точность получим пристойную.

В эту пятницу пройдет 7-я конференция сообществ DevConf 2016
https://habrahabr.ru/post/303292/?utm_source=habrahabr&utm_medium=rss&utm_campaign=hub
Уже в эту пятницу сообщества Python, Go, Ruby, PHP, Javascript, MySQL, PostgreSQL,Tarantool встретятся на DevConf 2016 — остались последние 60 мест. В этом году на конференции DevConf 9 секций: golang, php, ruby, python, common, js, devops, pm, storage После 17:30 мы проводим открытые митапы сообществ и круглые столы, которые может посетить любой желающий. 18 июня состоятся мастер-классы: Golang, PostgreSQL, Построение эффективной команды и налаживание процесса разработки, GraphQL & Relay, MySQL и архитектуры социальной сети 18-19 июня проводим хакатон по Yii в ТАСС Читать дальше →

Pytablewriter – библиотека для записи таблиц в разных форматах
https://github.com/thombashi/pytablewriter
Поддерживаются форматы CSV/HTML/JavaScript/JSON/Markdown/Excel/Pandas/Python/reStructuredText

promise - реализация Promises/A+
http://pypi.python.org/pypi/promise/
Реализация концепции промисов из Javascript

Jaspy – VM Python'а написанная на JavaScript
https://github.com/koehlma/jaspy/blob/master/README.rst
 Javascript Python VMПроект - виртульная машина Python для работы из браузера. 

Когда люди спят: определяем Facebook активность с помощью Google Chrome, Javascript и Python
http://www.automatingosint.com/blog/2016/03/osint-facebook-when-people-sleep/
 analysis api facebook

scrapyjs - поддержка JavaScript для Scrapy используя Splash
http://pypi.python.org/pypi/scrapyjs/


Используем Selenium и Python для создания скриншотов сайтов с тяжелым javascript
https://gist.github.com/dannguyen/61af3c7cbdef9d04a5fe


awesome-tdd - сборник ресурсов про TDD
https://github.com/unicodeveloper/awesome-tdd
Список удивительных ресурсов: книги, видео, статьи об использовании TDD (Test Driven Development) в разных языках программирования, на данным момент имеются разделы по Python, PHP, Javascript, Ruby

iplotter - строим графики с помощью JavaScript в iPython/Jupyter
http://pypi.python.org/pypi/iplotter/


jshint-scanner - достаем Javascript из файлов с помощью Jshint.
http://pypi.python.org/pypi/jshint-scanner/


Мост на Go для JavaScript и Python
https://blog.abourget.net/en/2016/02/25/go-bridges-to-javascript-and-python/
Соединяем JavaScript и Python

p.url - пакет для парсинга ссылок
http://pypi.python.org/pypi/p.url/
from purl import Purl

url = Purl('https://github.com/search?q=cat)

str(url.add_query('q', 'dog')) # => 'https://github.com/search?q=dog'
url = Purl('https://github.com/search)

str(url.add_query({
  'q': 'cat',
  'l': 'JavaScript',
  'type': 'Issues'
}))

url = Purl('https://github.com/search)

str(url.add_query('q', 'cat')
  .add_query('l', 'JavaScript')
  .add_query('type', 'Issues')) # => 'https://github.com/search?l=JavaScript&q=cat&type=Issues'


Анализ зависимостей (библиотек) в Python
http://kgullikson88.github.io/blog/pypi-analysis.html


PyEsprima – автоматически созданный парсер Javascript 6 на Python (ужоскод!)
https://github.com/PiotrDabkowski/Js2Py/blob/master/examples/pyesprima.py


transcrypt - транслятор Python 3.5 кода в JavaScript
http://www.transcrypt.org


asciimatics - пакет для создания ASCII анимаций
http://github.com/peterbrittain/asciimatics


Пишем простые проекты. Проект #1. Часть #2
http://pynsk.ru/blog/2016/01/29/write-project-1-part-2/
Продолжаем писать проект "Страница со статистикой отжимания" с помощью flask + google chart's.В этой части дополним шаблон javascript'ом, продумаем и реализуем сохранение/загрузки истории.Ранее создан базовый проект flask и html файл с текстом Hiiii.

dukpy - интерпретатор JavaScript на Python
http://pypi.python.org/pypi/dukpy/
Интепретатор поддерживает CoffeeScript, EcmaScript6, EcmaScript5, чистый Javascript>>> import dukpy
>>> dukpy.coffee_compile('''
...     fill = (container, liquid = "coffee") ->
...         "Filling the #{container} with #{liquid}..."
... ''')
'(function() {\n  var fill;\n\n  fill = function*(container, liquid) {\n    if (liquid == null) {\n      liquid = "coffee";\n    }\n    return "Filling the " + container + " with " + liquid + "...";\n  };\n\n}).call(this);\n'


pywhat - подборка неочевидных и вводящих в заблуждение языковых консрукций
https://github.com/cosmologicon/pywat
Не только в Ruby и JavaScript есть неочевидные вещи. Python тоже не отстает.

Мини-доклады на PyCon ZA 2015: пятница
http://www.pyvideo.org/video/3943/friday-lightning-talks
(0:00:00) Using Odo to load data by Tobias Brandt(0:05:23) Sh by Adrianna Pińska(0:08:44) Pygame Zero by Neil Muller(0:11:57) How not to hate Javascript by Adam Jorgensen(0:16:28) Testing code examples from your slides by Jeremy Thurgood

6-ая конференция DevConf 2015
http://pythonworld.ru/novosti-mira-python/devconf-2015.html
Все заинтересованные приглашаются посетить DevConf - самую крупную конференцию года для профессиональных разработчиков, которая пройдет 19 июня в Москве и состоит из секций: Storage, Python, Ruby, PHP, Javascript и общей секции.

Использование регулярных выражений в Python для новичков
http://tproger.ru/translations/regular-expression-python/
В последние годы языки общего назначения стали чаще использоваться для анализа данных. Разработчики и организации используют Python или Javascript для решения своих задач. И в этом им помогают регулярные выражения. Они — незаменимый инструмент для упорядочивания, причесывания, поиска или извлечения текстовых данных.

Блокнот разработчика — None (null), или немного о типе NoneType
http://pythonworld.ru/tipy-dannyx-v-python/none.html
Ключевое слово null обычно используется во многих языках программирования, таких как Java, C++, C# и JavaScript. Это значение, которое присваивается переменной. Концепция ключевого слова null в том, что она дает переменной нейтральное или "нулевое" поведение. А что же в Python?

dukpy - выполняем js внутри python програм
https://github.com/amol-/dukpy
Помимо собственно движка JavaScript в дистрибутив включен еще и компилятор CofeeScript в JS. Даже не спрашивайте для чего все это.

WebSocket RPC или как написать живое WEB приложение для браузера
http://habrahabr.ru/post/248507/
Описание и пример работы библиотеки WSRPC, упрощающей работу с WebSockets как на сервере так и на клиенте (JavaScript)

Руководство по разбору сайтов, использующих для отрисовки страниц JavaScript
http://impythonist.wordpress.com/2015/01/06/ultimate-guide-for-scraping-javascript-rendered-web-pages/
Основная идея - использовать виджет WebKit PyQt4 и данные брать уже после полной загрузки и отрисовки страницы в этом виджете

Python Meetup 31.10.14: асинхронность и soft skills
http://habrahabr.ru/company/wargaming/blog/243547/
Белорусские Python’исты в этом году отметили Хэллоуин вместе, на Python Meetup. Так получилось, что последняя пятница месяца выпала как раз на 31 октября. Это, конечно, не могло не сказаться на формате проведения встречи. Духи играли с техникой, а наши докладчики рассказывали об асинхронной работе в JavaScript и Python, преимуществах open source ERP и CRM системы Odoo и жаловались, как же не просто быть хорошим программистом, но плохим человеком.

Виджет Select2 для Django
https://github.com/asyncee/django-easy-select2
Эта библиотека для django позволяет быстро и просто заменить стандартные виджеты форм (select и select multiple) на виджеты из javascript-библиотеки Select2.

Authomatic: python библиотека для аутентификации и авторизации
http://habrahabr.ru/company/theonlypage/blog/239189/
python библиотека для аутентификации и авторизации с поддержкой протоколов OAuth 1.0а и OAuth 2.0. Согласно документации Authomatic обладает следующими замечательными особенностями:Слабая связанность.Компактный, но мощный интерфейсЕдинственная, причем необязательная зависимость: библиотека python-openidCSRF защитаБлагодаря адаптерам нет привязки к конкретному фреймворку. Сразу из коробки поддерживается Django, Flask и Webapp2.Возможность включать новые появляющиеся протоколы авторизации и аутентификацииЗапросы к программному интерфейсу (API) провайдера — проще некуда.Поддержка асинхронных запросовВ качестве бонуса javascript-библиотекаСразу из коробки поддержка:OAuth 1.0a провайдеров: Bitbucket, Flickr, Meetup, Plurk, Twitter, Tumblr, UbuntuOne,Vimeo, Xero, Xing and YahooOAuth 2.0 провайдеров: Behance, Bitly, Cosm, DeviantART, Facebook, Foursquare,GitHub, Google, LinkedIn, PayPal, Reddit, Viadeo, VK, WindowsLive, Yammer и Yandex.python-openid и OpenID, основанного на Google App Engine

Transit - one format to rule them all!
http://blog.cognitect.com/blog/2014/7/22/transit
Компания Cognitec выложила в открытый доступ и продвигает новый формат данных, предназначенный для обмена этими самыми данными между разнородными приложениями и средствами разработки. Предлагается набор библиотек для Java, Clojure, JavaScript (NodeJS и браузерный), ClojureScript, Ruby и, разумеется, для Python

Почему я не беспокоюсь за уход людей от использования Python
http://nothingbutsnark.svbtle.com/why-i-dont-worry-about-pythons-popularity
Собственно, небольшая статья статья с мыслями о том, что несмотря на некоторый тренд с перемещением разработчиков в сторону Go, JavaScript, Ruby - этот язык сохранит популярность в своей нише, так как по удобству его трудно с чем-то сравнивать

haxe теперь может выводить в python3
https://github.com/HaxeFoundation/haxe/pull/2924
Haxe - это язык программирования близкий к ActionScript и набор трансляторов кода на этом языке в код на других ЯП (C++, C#, Flash, Java, JavaScript, PHP)

DevConf 2014 — конференция профессиональных веб-разработчиков.
http://devconf.ru/
Доклады от опытных специалистов в MySQL, PostgreSQL, PHP, Python, Ruby, Javascript, Мобильных платформ. Организаторы приглашают поучаствовать в качестве зрителей или докладчиков. Текущий список предложений по докладам.

Sublime Text 3 для python, javascript и web-разработчиках
http://opensourcehacker.com/2014/03/10/sublime-text-3-for-python-javascript-and-web-developers/
Евангелическая статья с картинками о новой версии популярного текстового редактора

Прощаясь с Python
http://www.ianbicking.org/blog/2014/02/saying-goodbye-to-python.html
Ян Бикинг - активный участник Python-сообщества, автор pip, virualenv, Paste, WebOp пишет прощальный пост, уходя с этой технологию в JavaScript.

Преодоление проблемы передачи лишних данных при использовании WebSockets
http://tavendo.com/blog/post/dissecting-websocket-overhead/
Традиционный способ обмена сообщениями python-javascript не оптимален по трафику, а значит и по скорости обмена. В статье предлагается анализ ситуации и методы уменьшения оверхеда.

pythonium
https://github.com/pythonium/pythonium
Внезапно! Транслятор python 3 в javascript. Не спрашивайте зачем. Но академический интерес несомненно есть.

